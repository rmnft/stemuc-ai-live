import os
import logging
from pathlib import Path
import subprocess
import sys

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def setup_directories():
    """Criar diret√≥rios necess√°rios para a aplica√ß√£o."""
    dirs = [
        os.getenv('UPLOAD_DIR', '/tmp/uploads'),
        os.getenv('MODELS_DIR', '/tmp/models'),
        os.getenv('STEMS_DIR', '/tmp/stems'),
        os.getenv('OUTPUT_DIR', '/tmp/outputs')
    ]
    
    for dir_path in dirs:
        try:
            Path(dir_path).mkdir(parents=True, exist_ok=True)
            logger.info(f"üìÅ Diret√≥rio criado/verificado: {dir_path}")
        except Exception as e:
            logger.error(f"‚ùå Erro ao criar diret√≥rio {dir_path}: {e}")
            raise

def check_system_dependencies():
    """Verificar depend√™ncias do sistema."""
    try:
        # Verificar ffmpeg
        subprocess.run(['ffmpeg', '-version'], capture_output=True, check=True)
        logger.info("‚úÖ FFmpeg dispon√≠vel")
    except (subprocess.CalledProcessError, FileNotFoundError):
        logger.warning("‚ö†Ô∏è FFmpeg n√£o encontrado - alguns recursos podem n√£o funcionar")
    
    try:
        # Verificar git (necess√°rio para alguns downloads)
        subprocess.run(['git', '--version'], capture_output=True, check=True)
        logger.info("‚úÖ Git dispon√≠vel")
    except (subprocess.CalledProcessError, FileNotFoundError):
        logger.warning("‚ö†Ô∏è Git n√£o encontrado")

def check_system_resources():
    """Verificar recursos do sistema."""
    try:
        import psutil
        
        # Mem√≥ria
        memory = psutil.virtual_memory()
        logger.info(f"üíæ Mem√≥ria: {memory.total / (1024**3):.1f}GB total, "
                   f"{memory.available / (1024**3):.1f}GB dispon√≠vel")
        
        # Disco
        disk = psutil.disk_usage('/')
        logger.info(f"üíø Disco: {disk.total / (1024**3):.1f}GB total, "
                   f"{disk.free / (1024**3):.1f}GB livre")
        
        # CPU
        logger.info(f"üñ•Ô∏è CPUs: {psutil.cpu_count()} cores")
        
        # Verificar se h√° mem√≥ria suficiente (m√≠nimo 1GB)
        if memory.available < 1024**3:
            logger.warning("‚ö†Ô∏è Pouca mem√≥ria dispon√≠vel - pode afetar performance")
            
    except ImportError:
        logger.warning("‚ö†Ô∏è psutil n√£o instalado - n√£o foi poss√≠vel verificar recursos")
    except Exception as e:
        logger.error(f"‚ùå Erro ao verificar recursos: {e}")

def setup_environment_variables():
    """Configurar vari√°veis de ambiente necess√°rias."""
    # Torch home para modelos
    if not os.getenv('TORCH_HOME'):
        os.environ['TORCH_HOME'] = '/tmp/models'
    
    # Demucs model path
    if not os.getenv('DEMUCS_MODEL_PATH'):
        os.environ['DEMUCS_MODEL_PATH'] = '/tmp/models/demucs'
    
    # Hugging Face cache
    if not os.getenv('HF_HOME'):
        os.environ['HF_HOME'] = '/tmp/huggingface'
    
    logger.info("üîß Vari√°veis de ambiente configuradas")

def verify_tokens():
    """Verificar se os tokens necess√°rios est√£o configurados."""
    hf_token = os.getenv('HUGGINGFACE_TOKEN')
    if not hf_token:
        logger.error("‚ùå HUGGINGFACE_TOKEN n√£o configurado!")
        sys.exit(1)
    else:
        logger.info("‚úÖ Hugging Face token configurado")
    
    pyannote_key = os.getenv('PYANNOTE_API_KEY')
    if pyannote_key:
        logger.info("‚úÖ PyAnnote API key configurado")
    else:
        logger.info("‚ö†Ô∏è PyAnnote API key n√£o configurado - usando apenas modo local")

def download_critical_models():
    """Fazer download dos modelos cr√≠ticos na inicializa√ß√£o."""
    try:
        logger.info("üîÑ Iniciando download de modelos cr√≠ticos...")
        
        # Importar dentro da fun√ß√£o para evitar problemas de importa√ß√£o
        import torch
        from demucs.pretrained import get_model
        
        # Modelos essenciais do Demucs
        critical_models = ['htdemucs_ft', 'htdemucs_6s']
        
        for model_name in critical_models:
            try:
                logger.info(f"üì• Baixando modelo {model_name}...")
                model = get_model(model_name)
                logger.info(f"‚úÖ Modelo {model_name} carregado com sucesso")
                
                # Liberar mem√≥ria
                del model
                if torch.cuda.is_available():
                    torch.cuda.empty_cache()
                    
            except Exception as e:
                logger.error(f"‚ùå Erro ao carregar modelo {model_name}: {e}")
                # N√£o falhar se um modelo espec√≠fico n√£o carregar
                continue
                
        logger.info("üéâ Download de modelos conclu√≠do!")
        
    except Exception as e:
        logger.error(f"‚ùå Erro cr√≠tico no download de modelos: {e}")
        # Em produ√ß√£o, podemos continuar sem alguns modelos
        logger.warning("‚ö†Ô∏è Continuando sem alguns modelos - funcionalidade pode ser limitada")

def main():
    """Fun√ß√£o principal de inicializa√ß√£o."""
    logger.info("üöÄ Iniciando configura√ß√£o do Stemuc Audio Forge...")
    
    try:
        # 1. Configurar vari√°veis de ambiente
        setup_environment_variables()
        
        # 2. Criar diret√≥rios
        setup_directories()
        
        # 3. Verificar depend√™ncias do sistema
        check_system_dependencies()
        
        # 4. Verificar recursos do sistema
        check_system_resources()
        
        # 5. Verificar tokens
        verify_tokens()
        
        # 6. Download de modelos cr√≠ticos
        download_critical_models()
        
        logger.info("‚úÖ Inicializa√ß√£o conclu√≠da com sucesso!")
        
    except Exception as e:
        logger.error(f"‚ùå Erro na inicializa√ß√£o: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 